name: CI/CD Pipeline main

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  test:
    name: Run Tests with PostgreSQL
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: jerem
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: trackmyspend
        options: >-
          --health-cmd="pg_isready -U jerem" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          sleep 10
          until pg_isready -h postgres -p 5432 -U jerem; do
            echo "Still waiting..."
            sleep 2
          done
          echo "PostgreSQL is ready!"

      - name: Set up environment variables
        run: |
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/trackmyspend" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=jerem" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=admin" >> $GITHUB_ENV

      - name: Run tests
        run: mvn clean test -Dspring.profiles.active=test

  build:
    name: Build Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean compile

  package:
    name: Package Application
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Package Application
        run: mvn clean package

  # deploy:
  #   name: Deploy Application
  #   runs-on: ubuntu-latest
  #   needs: package
  #   if: github.ref == 'refs/heads/main'

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: 'temurin'
  #         java-version: '17'

  #     - name: Get the commit message
  #       id: commit_message
  #       run: |
  #         RAW_MSG="$(git log -1 --pretty=%B)"
  #         CLEAN_MSG=$(echo "$RAW_MSG" | tr -cs 'a-zA-Z0-9_' '-' | cut -c1-50)
  #         echo "COMMIT_MESSAGE=$CLEAN_MSG" >> $GITHUB_ENV

  #     - name: Build Docker image
  #       run: |
  #         docker build -t splinter2525/trackmyspend-backend:${{ env.COMMIT_MESSAGE }} .

  #     - name: Push Docker image to Docker Hub
  #       run: |
  #         echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
  #         docker tag splinter2525/trackmyspend-backend:${{ env.COMMIT_MESSAGE }} splinter2525/trackmyspend-backend:${{ env.COMMIT_MESSAGE }}
  #         docker push splinter2525/trackmyspend-backend:${{ env.COMMIT_MESSAGE }}

  #     - name: Deploy to server
  #       env:
  #         SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  #         SERVER_USER: ${{ secrets.SERVER_USER }}
  #         SERVER_HOST: ${{ secrets.SERVER_HOST }}
  #       run: |
  #         echo "$SSH_PRIVATE_KEY" > private_key && chmod 600 private_key
  #         ssh -o StrictHostKeyChecking=no -i private_key $SERVER_USER@$SERVER_HOST << 'EOF'
  #           docker pull splinter2525/trackmyspend-backend:${{ env.COMMIT_MESSAGE }}
  #           docker stop trackmyspend-backend || true
  #           docker rm trackmyspend-backend || true
  #           docker run -d --restart unless-stopped --name trackmyspend-backend -p 8080:8080 splinter2525/trackmyspend-backend:${{ env.COMMIT_MESSAGE }}
  #         EOF
  #         rm private_key
